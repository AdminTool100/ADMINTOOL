import requests
import json
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

# ------------------- Load c√¥ng th·ª©c t·ª´ file -------------------
with open("8k_cong_thuc.json", "r", encoding="utf-8") as f:
    cong_thuc = json.load(f)

with open("thuattoan.json", "r", encoding="utf-8") as f:
    thuattoan = json.load(f)

# ------------------- H√†m l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ API -------------------
def fetch_data():
    try:
        res = requests.get("https://saobody-lopq.onrender.com/api/taixiu/history")
        res.raise_for_status()

        # ‚úÖ FIX l·ªói JSONDecodeError b·∫±ng c√°ch x·ª≠ l√Ω JSON Lines
        lines = res.text.strip().splitlines()
        data = [json.loads(line) for line in lines if line.strip()]
        return data
    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", e)
        return []

# ------------------- Chuy·ªÉn k·∫øt qu·∫£ T√†i/X·ªâu th√†nh T/X -------------------
def convert_to_tx(results):
    return ''.join(["T" if r.lower().strip() == "t√†i" else "X" for r in results])

# ------------------- D·ª± ƒëo√°n theo c√¥ng th·ª©c 8k -------------------
def predict_by_cong_thuc(history: str):
    for length in range(8, 2, -1):
        pattern = history[-length:]
        if pattern in cong_thuc:
            entry = cong_thuc[pattern]
            return {
                "du_doan": "T√†i" if entry["next"] == "T" else "X·ªâu",
                "confidence": entry["confidence"],
                "matched_pattern": pattern
            }
    return None

# ------------------- D·ª± ƒëo√°n theo b·∫£ng thu·∫≠t to√°n -------------------
def predict_by_thuattoan(history: str):
    for length in range(5, 0, -1):
        pattern = history[-length:]
        if pattern in thuattoan:
            result = thuattoan[pattern]
            return {
                "du_doan": result,
                "confidence": 60,
                "matched_pattern": pattern
            }
    return None

# ------------------- Trang ch·ªß -------------------
@app.get("/")
def home():
    return {"message": "üé≤ API D·ª± ƒëo√°n T√†i/X·ªâu b·∫±ng C√¥ng th·ª©c th·ªëng k√™ ƒë√£ s·∫µn s√†ng."}

# ------------------- API ch√≠nh: /predict -------------------
@app.get("/predict")
def predict():
    data = fetch_data()
    if len(data) < 10:
        return JSONResponse(content={"error": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n."})

    # S·∫Øp x·∫øp tƒÉng d·∫ßn theo session ƒë·ªÉ l·∫•y phi√™n m·ªõi nh·∫•t
    data = sorted(data, key=lambda x: x["session"])
    current = data[-1]  # phi√™n m·ªõi nh·∫•t
    current_session = current["session"]

    # T·∫°o chu·ªói l·ªãch s·ª≠ T/X
    result_list = [item["result"] for item in data]
    history_str = convert_to_tx(result_list)

    # D·ª± ƒëo√°n theo c√¥ng th·ª©c (∆∞u ti√™n 8k, sau ƒë√≥ fallback)
    prediction = predict_by_cong_thuc(history_str) or predict_by_thuattoan(history_str)

    if not prediction:
        return JSONResponse(content={"error": "Kh√¥ng t√¨m ƒë∆∞·ª£c m·∫´u ph√π h·ª£p ƒë·ªÉ d·ª± ƒëo√°n."})

    return {
        "current_session": current_session,
        "dice": current["dice"],
        "total": current["total"],
        "result": current["result"],
        "next_session": current_session + 1,
        "du_doan": prediction["du_doan"],
        "confidence": f"{prediction['confidence']}%",
        "matched_pattern": prediction["matched_pattern"]
    }